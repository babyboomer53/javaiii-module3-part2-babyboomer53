package NumericConversions;

import javax.swing.*;

public class TheView extends JFrame {

    /**
     * Creates new form NewJFrame
     */
    public TheView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        buttonGroup1 = new ButtonGroup();
        jLabel1 = new JLabel();
        jTextField1 = new JTextField();
        jComboBox1 = new JComboBox<>();
        jLabel2 = new JLabel();
        jTextField2 = new JTextField();
        jComboBox2 = new JComboBox<>();
        jButton1 = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Numeric Base Converter");
        setAlwaysOnTop(true);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));

        jLabel1.setLabelFor(jTextField1);
        jLabel1.setText("Input");

        jTextField1.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField2.setHorizontalAlignment(SwingConstants.RIGHT);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new DefaultComboBoxModel<>(new String[]{"Binary", "Decimal", "Hexadecimal", "Octal"}));

        jComboBox1.setSelectedIndex(1);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setLabelFor(jTextField2);
        jLabel2.setText("Result");

        jTextField2.setEditable(true);

        jComboBox2.setModel(new DefaultComboBoxModel<>(new String[]{"Binary", "Decimal", "Hexadecimal", "Octal"}));
        jComboBox2.setSelectedIndex(1);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jButton1)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel2)
                                                                .addGap(12, 12, 12)
                                                                .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE)))
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(jLabel1))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(4, 4, 4)
                                                .addComponent(jLabel2))
                                        .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

    }

    public void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String input = jTextField1.getText();
        jTextField2.setText(performConversion());
    }

    private String performConversion() {
        String theAnswer = null;
        TheModel theModel = new TheModel();
        theModel.setTheNumber(jTextField1.getText().toUpperCase().trim());
        int baseIn = jComboBox1.getSelectedIndex();
        int baseOut = jComboBox2.getSelectedIndex();
        switch (baseIn) {
            case 0:
                switch (baseOut) {
                    case 0:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 2, 2);
                        break;
                    case 1:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 2, 10);
                        break;
                    case 2:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 2, 16);
                        break;
                    case 3:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 2, 8);
                        break;
                    default:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 2, 10);
                }
                break;
            case 1:
                switch (baseOut) {
                    case 0:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 10, 2);
                        break;
                    case 1:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 10, 10);
                        break;
                    case 2:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 10, 16);
                        break;
                    case 3:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 10, 8);
                        break;
                    default:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 10, 10);
                }
                break;
            case 2:
                switch (baseOut) {
                    case 0:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 16, 2);
                        break;
                    case 1:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 16, 10);
                        break;
                    case 2:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 16, 16);
                        break;
                    case 3:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 16, 8);
                        break;
                    default:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 16, 10);
                }
                break;
            case 3:
                switch (baseOut) {
                    case 0:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 8, 2);
                        break;
                    case 1:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 8, 10);
                        break;
                    case 2:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 8, 16);
                        break;
                    case 3:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 8, 8);
                        break;
                    default:
                        theAnswer = BaseConversions.baseToBase(theModel.getTheNumber(), 8, 10);
                }
            default:
                break;
        }
        return theAnswer;
    }

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    public String getNumber(){
        return jTextField1.getText();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TheView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TheView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TheView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TheView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TheView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private ButtonGroup buttonGroup1;
    private JButton jButton1;
    private JComboBox<String> jComboBox1;
    private JComboBox<String> jComboBox2;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JTextField jTextField1;
    private JTextField jTextField2;
    // End of variables declaration
}
